const { chromium } = require('playwright');

async function quickLoginTest() {
  console.log('üöÄ Starting quick login test for trial.1office.vn...');
  
  const browser = await chromium.launch({ 
    headless: false, // Hi·ªÉn th·ªã browser
    slowMo: 1000 // Ch·∫≠m l·∫°i ƒë·ªÉ d·ªÖ theo d√µi
  });
  
  const page = await browser.newPage();
  
  try {
    // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang
    console.log('üìç Navigating to trial.1office.vn...');
    await page.goto('https://trial.1office.vn');
    await page.waitForLoadState('networkidle');
    
    // Ch·ª•p screenshot ban ƒë·∫ßu
    await page.screenshot({ path: 'quick-test-initial.png', fullPage: true });
    console.log('üì∏ Initial screenshot saved');
    
    // T√¨m form ƒëƒÉng nh·∫≠p
    console.log('üîç Looking for login form...');
    
    // Th·ª≠ t√¨m c√°c tr∆∞·ªùng input
    const emailSelectors = [
      'input[type="email"]',
      'input[name="email"]',
      'input[name="username"]',
      'input[placeholder*="email" i]',
      '#email',
      '#username'
    ];
    
    const passwordSelectors = [
      'input[type="password"]',
      'input[name="password"]',
      '#password'
    ];
    
    let emailField = null;
    let passwordField = null;
    
    // T√¨m email field
    for (const selector of emailSelectors) {
      try {
        const field = page.locator(selector).first();
        if (await field.isVisible()) {
          emailField = field;
          console.log(`‚úÖ Found email field: ${selector}`);
          break;
        }
      } catch (e) {
        continue;
      }
    }
    
    // T√¨m password field
    for (const selector of passwordSelectors) {
      try {
        const field = page.locator(selector).first();
        if (await field.isVisible()) {
          passwordField = field;
          console.log(`‚úÖ Found password field: ${selector}`);
          break;
        }
      } catch (e) {
        continue;
      }
    }
    
    if (!emailField || !passwordField) {
      console.log('‚ùå Could not find login form fields');
      
      // In ra t·∫•t c·∫£ input fields c√≥ tr√™n trang
      const allInputs = await page.locator('input').all();
      console.log('\nüìã All input fields found:');
      for (let i = 0; i < allInputs.length; i++) {
        const input = allInputs[i];
        const type = await input.getAttribute('type');
        const name = await input.getAttribute('name');
        const id = await input.getAttribute('id');
        const placeholder = await input.getAttribute('placeholder');
        console.log(`  ${i + 1}. type="${type}" name="${name}" id="${id}" placeholder="${placeholder}"`);
      }
      
      return;
    }
    
    // Th·ª≠ ƒëƒÉng nh·∫≠p v·ªõi credentials demo
    const testCredentials = [
      { email: 'demo@1office.vn', password: 'demo123456' },
      { email: 'admin@1office.vn', password: 'admin123456' },
      { email: 'test@1office.vn', password: 'test123456' },
      { email: 'demo', password: 'demo' }
    ];
    
    for (const creds of testCredentials) {
      console.log(`\nüîê Trying login with: ${creds.email}`);
      
      // Clear v√† fill fields
      await emailField.clear();
      await emailField.fill(creds.email);
      
      await passwordField.clear();
      await passwordField.fill(creds.password);
      
      // T√¨m n√∫t ƒëƒÉng nh·∫≠p
      const loginButtonSelectors = [
        'button[type="submit"]',
        'input[type="submit"]',
        'button:has-text("ƒêƒÉng nh·∫≠p")',
        'button:has-text("Login")',
        '.login-btn',
        '#login-button'
      ];
      
      let loginButton = null;
      for (const selector of loginButtonSelectors) {
        try {
          const button = page.locator(selector).first();
          if (await button.isVisible()) {
            loginButton = button;
            console.log(`‚úÖ Found login button: ${selector}`);
            break;
          }
        } catch (e) {
          continue;
        }
      }
      
      if (!loginButton) {
        console.log('‚ùå Could not find login button');
        continue;
      }
      
      // Click ƒëƒÉng nh·∫≠p
      await loginButton.click();
      await page.waitForTimeout(3000); // Ch·ªù 3 gi√¢y
      
      // Ki·ªÉm tra k·∫øt qu·∫£
      const currentUrl = page.url();
      console.log(`üìç Current URL after login: ${currentUrl}`);
      
      // Ch·ª•p screenshot sau khi ƒëƒÉng nh·∫≠p
      await page.screenshot({ 
        path: `quick-test-after-login-${creds.email.replace('@', '-').replace('.', '-')}.png`, 
        fullPage: true 
      });
      
      // Ki·ªÉm tra xem c√≥ ƒëƒÉng nh·∫≠p th√†nh c√¥ng kh√¥ng
      if (currentUrl !== 'https://trial.1office.vn' && !currentUrl.includes('/login')) {
        console.log('üéâ Login appears successful! URL changed.');
        
        // Ki·ªÉm tra th√™m c√°c d·∫•u hi·ªáu th√†nh c√¥ng
        const successIndicators = [
          '.dashboard',
          '.main-menu',
          '.user-info',
          '.profile',
          '.navbar'
        ];
        
        for (const indicator of successIndicators) {
          try {
            const element = page.locator(indicator);
            if (await element.isVisible({ timeout: 2000 })) {
              console.log(`‚úÖ Found success indicator: ${indicator}`);
              console.log('üéä LOGIN SUCCESSFUL!');
              return;
            }
          } catch (e) {
            continue;
          }
        }
      }
      
      // Ki·ªÉm tra th√¥ng b√°o l·ªói
      const errorSelectors = [
        '.error-message',
        '.alert-danger',
        '.text-red',
        ':has-text("sai")',
        ':has-text("incorrect")'
      ];
      
      for (const selector of errorSelectors) {
        try {
          const errorElement = page.locator(selector);
          if (await errorElement.isVisible({ timeout: 2000 })) {
            const errorText = await errorElement.textContent();
            console.log(`‚ùå Error message: ${errorText}`);
            break;
          }
        } catch (e) {
          continue;
        }
      }
      
      // Quay l·∫°i trang login ƒë·ªÉ th·ª≠ credentials ti·∫øp theo
      if (testCredentials.indexOf(creds) < testCredentials.length - 1) {
        await page.goto('https://trial.1office.vn');
        await page.waitForLoadState('networkidle');
      }
    }
    
    console.log('‚ùå All login attempts failed');
    
  } catch (error) {
    console.error('üí• Error during test:', error.message);
    await page.screenshot({ path: 'quick-test-error.png', fullPage: true });
  } finally {
    console.log('üèÅ Test completed. Browser will close in 5 seconds...');
    await page.waitForTimeout(5000);
    await browser.close();
  }
}

// Ch·∫°y test
quickLoginTest().catch(console.error);
