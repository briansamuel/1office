<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\DeviceAuthenticationService;

class CleanupExpiredSessions extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'sessions:cleanup 
                            {--days=30 : S·ªë ng√†y ƒë·ªÉ gi·ªØ l·∫°i session ƒë√£ h·∫øt h·∫°n}
                            {--force : X√≥a m√† kh√¥ng c·∫ßn x√°c nh·∫≠n}';

    /**
     * The console command description.
     */
    protected $description = 'D·ªçn d·∫πp c√°c session ƒë√£ h·∫øt h·∫°n v√† kh√¥ng ho·∫°t ƒë·ªông';

    protected DeviceAuthenticationService $deviceAuthService;

    public function __construct(DeviceAuthenticationService $deviceAuthService)
    {
        parent::__construct();
        $this->deviceAuthService = $deviceAuthService;
    }

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        $this->info('üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp session ƒë√£ h·∫øt h·∫°n...');

        $days = $this->option('days');
        $force = $this->option('force');

        // ƒê·∫øm s·ªë session s·∫Ω b·ªã x√≥a
        $expiredCount = \App\Models\UserSession::where('expires_at', '<=', now())
                                              ->orWhere(function ($query) use ($days) {
                                                  $query->where('is_active', false)
                                                        ->where('logout_at', '<=', now()->subDays($days));
                                              })
                                              ->count();

        if ($expiredCount === 0) {
            $this->info('‚úÖ Kh√¥ng c√≥ session n√†o c·∫ßn d·ªçn d·∫πp.');
            return self::SUCCESS;
        }

        $this->warn("‚ö†Ô∏è  T√¨m th·∫•y {$expiredCount} session c·∫ßn d·ªçn d·∫πp.");

        // X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a (tr·ª´ khi c√≥ --force)
        if (!$force && !$this->confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√°c session n√†y?')) {
            $this->info('‚ùå H·ªßy b·ªè thao t√°c d·ªçn d·∫πp.');
            return self::SUCCESS;
        }

        // Th·ª±c hi·ªán d·ªçn d·∫πp
        $deletedCount = $this->deviceAuthService->cleanupExpiredSessions();

        // D·ªçn d·∫πp th√™m c√°c session c≈© ƒë√£ logout
        $oldLogoutSessions = \App\Models\UserSession::where('is_active', false)
                                                   ->where('logout_at', '<=', now()->subDays($days))
                                                   ->delete();

        $totalDeleted = $deletedCount + $oldLogoutSessions;

        if ($totalDeleted > 0) {
            $this->info("‚úÖ ƒê√£ d·ªçn d·∫πp th√†nh c√¥ng {$totalDeleted} session.");
            
            // Hi·ªÉn th·ªã th·ªëng k√™
            $this->displayStatistics();
        } else {
            $this->warn('‚ö†Ô∏è  Kh√¥ng c√≥ session n√†o ƒë∆∞·ª£c x√≥a.');
        }

        return self::SUCCESS;
    }

    /**
     * Hi·ªÉn th·ªã th·ªëng k√™ session
     */
    protected function displayStatistics(): void
    {
        $this->info("\nüìä Th·ªëng k√™ session hi·ªán t·∫°i:");

        $totalSessions = \App\Models\UserSession::count();
        $activeSessions = \App\Models\UserSession::where('is_active', true)->count();
        $expiredSessions = \App\Models\UserSession::where('expires_at', '<=', now())->count();

        $this->table(
            ['Lo·∫°i Session', 'S·ªë l∆∞·ª£ng'],
            [
                ['T·ªïng c·ªông', $totalSessions],
                ['ƒêang ho·∫°t ƒë·ªông', $activeSessions],
                ['ƒê√£ h·∫øt h·∫°n', $expiredSessions],
                ['ƒê√£ ƒëƒÉng xu·∫•t', $totalSessions - $activeSessions],
            ]
        );

        // Th·ªëng k√™ theo thi·∫øt b·ªã
        $deviceStats = \App\Models\UserSession::selectRaw('device_type, COUNT(*) as count')
                                             ->where('is_active', true)
                                             ->groupBy('device_type')
                                             ->get();

        if ($deviceStats->isNotEmpty()) {
            $this->info("\nüì± Th·ªëng k√™ theo thi·∫øt b·ªã (ƒëang ho·∫°t ƒë·ªông):");
            $this->table(
                ['Lo·∫°i thi·∫øt b·ªã', 'S·ªë l∆∞·ª£ng'],
                $deviceStats->map(function ($stat) {
                    return [
                        ucfirst($stat->device_type),
                        $stat->count
                    ];
                })->toArray()
            );
        }
    }
}
